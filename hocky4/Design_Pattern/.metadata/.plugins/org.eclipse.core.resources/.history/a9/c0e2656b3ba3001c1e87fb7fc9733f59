package view;

import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import Audio.AudioPlayer;
import Audio.BackgroundAudio;
import controller.ControllerEnemy;
import controller.ControllerPlayer;
import factoryEnemy.FactoryArachnik;
import factoryEnemy.FactoryBlackDragon;
import factoryEnemy.FactoryDragon;
import factoryEnemy.FactorySlugger;
import factoryEnemy.IFactoryEnemy;
import main.GamePanel;
import model.Entity.Explosion;
import model.Entity.HUD;
import model.Entity.Player;
import model.Entity.Teleport;
import model.Entity.Enemy.Enemy;
import model.TileMap.Background;
import model.TileMap.TileMap;
import observer.DataTime;

public class ViewLevel1State extends AViewState implements Observer {
	private String h = "0";
	private String m = "0";
	private String s = "0";
	private DataTime data;

	private TileMap tileMap;
	private Background bg;
	private ControllerPlayer ctrlPlayer;
	private ControllerEnemy ctrlEnemy;

	private Player player;
	private ArrayList<Enemy> enemies;
	private ArrayList<Explosion> explosions;
	private HUD hud;

	private AudioPlayer bgMusic;

	private Teleport teleport;

	private boolean done;

	public ViewLevel1State(GameStateManager gsm, Observable o) {
		this.gsm = gsm;
		o.addObserver(this);
		bgMusic = new BackgroundAudio();
		init();
	}

	@Override
	public void update(Observable o, Object arg) {
		if (o instanceof DataTime) {
			DataTime data = (DataTime) o;
			this.h = data.getH();
			this.m = data.getM();
			this.s = data.getS();
		}

	}

	public void init() {

		tileMap = new TileMap(30);

		bgMusic.play();

//		tileMap.setPosition(0, 0);
		tileMap.setTween(1);

		player = new Player(tileMap);
		player.setPosition(100, 100);
		createEnemies();
		ctrlPlayer = new ControllerPlayer(this, player);
		for (int i = 0; i < enemies.size(); i++) {
			ctrlEnemy = new ControllerEnemy(this, enemies.get(i));
		}
		explosions = new ArrayList<Explosion>();

		hud = new HUD(player);
		// thay doi background theo thoi gian
		if (Integer.parseInt(s) >= 5 && Integer.parseInt(s) < 11) {
			bg = new Background("/Backgrounds/background-morning.png", 0.1);
		}
//		else if (Integer.parseInt(s) >= 11 && Integer.parseInt(s) < 17) {
//			bg = new Background("/Backgrounds/background-afternoon.png", 0.1);
//		} else if (Integer.parseInt(s) >= 17 && Integer.parseInt(s) < 23) {
//			bg = new Background("/Backgrounds/background-evening.png", 0.1);
//		} else {
//			bg = new Background("/Backgrounds/background-night.png", 0.1);
//		}

		// teleport
		teleport = new Teleport(tileMap);
		teleport.setPosition(3150, 197);

	}

	public void createEnemies() {
		enemies = new ArrayList<Enemy>();
		IFactoryEnemy factory;

		Enemy s;
		Point[] points = new Point[] { new Point(200, 100), new Point(1213, 80), new Point(1426, 80),
				new Point(1650, 140), new Point(860, 200), new Point(1525, 200), new Point(1680, 200),
				new Point(1800, 200), new Point(2900, 200), new Point(2920, 200), new Point(2940, 200),
				new Point(2030, 110), new Point(3060, 150) };
		for (int i = 0; i < points.length; i++) {
			if (i == points.length - 1) {
				factory = new FactoryDragon();
				s = factory.createEnemy(tileMap, points[i].x, points[i].y);
				enemies.add(s);
			} else if (i == points.length - 2) {
				factory = new FactoryBlackDragon();
				s = factory.createEnemy(tileMap, points[i].x, points[i].y);
				enemies.add(s);
			} else if (i == 1 || i == 2 || i == 3) {
				factory = new FactoryArachnik();
				s = factory.createEnemy(tileMap, points[i].x, points[i].y);
				enemies.add(s);
			} else {
				factory = new FactorySlugger();
				s = factory.createEnemy(tileMap, points[i].x, points[i].y);
				enemies.add(s);
			}
		}
	}

	public void update() {

		if (player.isDead()) {
			gsm.setState(GameStateManager.GAMEOVER);
		}
		if (teleport.contains(player)) {
			gsm.setCurrentState(GameStateManager.GAMEWON);
		}
		// update player
		ctrlPlayer.update();
		tileMap.setPosition(GamePanel.WIDTH / 2 - player.getX(), GamePanel.HEIGHT / 2 - player.getY());

		// set background
		bg.setPosition(tileMap.getx(), tileMap.gety());

		// check attack to enemies and remove enemies
		ctrlPlayer.checkEnemies();

		// teleport

		ctrlEnemy.update();

		if (enemies.size() == 0) {
			done = true;
		}
		teleport.update();

	}

	public ArrayList<Enemy> getEnemies() {
		return enemies;
	}

	public void setEnemies(ArrayList<Enemy> enemies) {
		this.enemies = enemies;
	}

	public ArrayList<Explosion> getExplosions() {
		return explosions;
	}

	public void setExplosions(ArrayList<Explosion> explosions) {
		this.explosions = explosions;
	}

	public void draw(Graphics2D g) {
		// draw background
		bg.draw(g);

		// draw tile map
		tileMap.draw(g);

		// draw player
		player.draw(g);

		// draw enemies
		for (int i = 0; i < enemies.size(); i++) {
			enemies.get(i).draw(g);
		}
		// draw hud
		hud.draw(g);

		// draw time
		g.drawString(h + ":" + m + ":" + s, 260, 20);

		// draw explosion
		for (int i = 0; i < explosions.size(); i++) {
			explosions.get(i).setMapPosition((int) tileMap.getx(), (int) tileMap.gety());
			explosions.get(i).draw(g);
		}
		// draw teleport
		if (done)
			teleport.draw(g);

	}

	public void keyPressed(int k) {
		if (k == KeyEvent.VK_LEFT)
			player.setLeft(true);
		if (k == KeyEvent.VK_RIGHT)
			player.setRight(true);
		if (k == KeyEvent.VK_W)
			player.setJumping(true);
		if (k == KeyEvent.VK_E)
			player.setGliding(true);
		if (k == KeyEvent.VK_R)
			player.setScratching();
		if (k == KeyEvent.VK_F)
			player.setFiring();
	}

	public void keyReleased(int k) {
		if (k == KeyEvent.VK_LEFT)
			player.setLeft(false);
		if (k == KeyEvent.VK_RIGHT)
			player.setRight(false);
		if (k == KeyEvent.VK_W)
			player.setJumping(false);
		if (k == KeyEvent.VK_E)
			player.setGliding(false);
	}

}
